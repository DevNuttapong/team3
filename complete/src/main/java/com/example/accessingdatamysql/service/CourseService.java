package com.example.accessingdatamysql.service;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.accessingdatamysql.model.Course;
import com.example.accessingdatamysql.model.Student;
import com.example.accessingdatamysql.service.repo.StudentRepository;
import com.example.accessingdatamysql.service.repo.entity.StudentEntity;

@Service    
public class CourseService {

	@Autowired // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
	// private CourseRepository courseRepository;

    // public List<Course> findAll() {   
    //     Iterable<couresEntity> iter = courseRepository.findAll();
        
        
    //     List<Course> ls = new ArrayList<>();    
    //     iter.forEach(courseEntity -> {
    //         Course course = new course();
    //         course.setCourseId(courseEntity.getCourseId());
    //         course.setCourseName(courseEntity.getCourseName());
    //         course.setCredit(courseEntity.getCredit());
    //         course.setMaxSeat(course.Entity.getMaxSeat());
    //         ls.add(course);
    //     });    
    //     return ls;    
    // }


    public Course save(Course course) {
        CourseEntity courseEntity = new CourseEntity();
        courseEntity.setCourseId(course.getCourseId());
		courseEntity.setCourseName(course.getCourseName());
		courseEntity.setCredit(course.getCredit());
		courseEntity.setMaxSeat(course.getMaxSeat());


		StudentEntity resultStudentEntity = courseRepository.save(courseEntity);


        Student resultStudent = new Student();
        resultStudent.setId(resultStudentEntity.getId());
        resultStudent.setName(resultStudentEntity.getName());
        resultStudent.setEmail(resultStudentEntity.getEmail());
        resultStudent.setIsActive(1 == studentEntity.getState());

        return resultStudent;
    }


    // public int countStudents(boolean isActive) {   
    //     Integer count = studentRepository.countStudents(isActive? 1: 0);
    //     return Optional.ofNullable(count).orElse(0);    
    // }
}
